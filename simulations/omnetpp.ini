[General]
network = inet.networks.tsn.TsnLinearNetwork
sim-time-limit = 1s
description = "TSN features applied to In-Vehicle Networks"

**.displayGateSchedules = true
**.gateFilter = "**.eth[1].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"

# client applications
*.client.numApps = 2
*.client.app[*].typename = "UdpSourceApp"
*.client.app[*].io.destAddress = "server"
# *.client.app[*].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)

*.client.app[0].display-name = "speed/torque command"
*.client.app[0].io.destPort = 1000
*.client.app[0].source.productionInterval = exponential(1ms) # 1000Hz
#*.client.app[0].source.productionInterval = exponential(200us)
*.client.app[0].source.packetLength = 128B - 64B

*.client.app[1].display-name = "brake command"
*.client.app[1].io.destPort = 1001
*.client.app[1].source.productionInterval = exponential(10ms) # 10Hz
#*.client.app[1].source.productionInterval = exponential(400us)
*.client.app[1].source.packetLength = 256B


# server applications
*.server.numApps = 2
*.server.app[*].typename = "UdpSinkApp"

*.server.app[0].io.localPort = 1000

*.server.app[1].io.localPort = 1001

# enable outgoing streams
*.client.hasOutgoingStreams = true

# client stream identification
*.client.bridging.streamIdentifier.identifier.mapping = [{stream: "speed/torque command", packetFilter: expr(udp.destPort == 1000)},
                                                         {stream: "brake command", packetFilter: expr(udp.destPort == 1001)}]

# client stream encoding
*.client.bridging.streamCoder.encoder.mapping = [{stream: "speed/torque command", pcp: 7},
                                                 {stream: "brake command", pcp: 5}]

# enable egress traffic shaping
*.switch.hasEgressTrafficShaping = true

# disable forwarding IEEE 802.1Q C-Tag
*.switch.bridging.directionReverser.reverser.excludeEncapsulationProtocols = ["ieee8021qctag"]


# time-aware traffic shaping
*.switch.eth[*].macLayer.queue.numTrafficClasses = 8

*.switch.eth[*].macLayer.queue.*[7].display-name = "speed/torque command"
*.switch.eth[*].macLayer.queue.transmissionGate[7].offset = 0ms
*.switch.eth[*].macLayer.queue.transmissionGate[7].durations = [4ms, 6ms] # period is 10 [open, close]

*.switch.eth[*].macLayer.queue.*[5].display-name = "brake command"
*.switch.eth[*].macLayer.queue.transmissionGate[5].offset = 6ms
*.switch.eth[*].macLayer.queue.transmissionGate[5].durations = [2ms, 8ms] # [open, close]

# enable ingress per-stream filtering
*.switch.hasIngressTrafficFiltering = true

# per-stream filtering
*.switch.bridging.streamFilter.ingress.numStreams = 2
*.switch.bridging.streamFilter.ingress.classifier.mapping = {"speed/torque command": 0, "brake command": 1}

*.switch.bridging.streamFilter.ingress.meter[*].typename = "SingleRateTwoColorMeter"

*.switch.bridging.streamFilter.ingress.meter[7].display-name = "speed/torque command"
*.switch.bridging.streamFilter.ingress.meter[7].committedInformationRate = 40Mbps
*.switch.bridging.streamFilter.ingress.meter[7].committedBurstSize = 10kB

*.switch.bridging.streamFilter.ingress.meter[5].display-name = "brake command"
*.switch.bridging.streamFilter.ingress.meter[5].committedInformationRate = 20Mbps
*.switch.bridging.streamFilter.ingress.meter[5].committedBurstSize = 5kB