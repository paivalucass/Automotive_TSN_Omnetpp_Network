[General]
network = IVN_TSN_Network
sim-time-limit = 5s
description = "TSN features applied to In-Vehicle Networks"

**.displayGateSchedules = true
**.gateFilter = "**.eth[1].**"
**.gateScheduleVisualizer.height = 20
**.gateScheduleVisualizer.placementHint = "top"

# ECU APPLICATIONS
# -------------------------------------------------------------------------------

# PowerTrain applications

*.powerTrainECU.numApps = 1

*.powerTrainECU.app[0].typename = "UdpSinkApp"
*.powerTrainECU.app[0].io.localPort = 1000
# *.client.app[*].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)

# -------------------------------------------------------------------------------

# Adaptive Cruise Control applications

*.adaptiveCruiseControlECU.numApps = 4

# APP 1 CLIENT
*.adaptiveCruiseControlECU.app[0].typename = "UdpSourceApp"
*.adaptiveCruiseControlECU.app[0].display-name = "speed/torque command"
*.adaptiveCruiseControlECU.app[0].io.destPort = 1000
*.adaptiveCruiseControlECU.app[0].source.productionInterval = exponential(1ms) # 1000Hz 
#*.client.app[0].source.productionInterval = exponential(200us)
*.adaptiveCruiseControlECU.app[0].source.packetLength = 128B - 64B

# APP 2 CLIENT
*.adaptiveCruiseControlECU.app[1].typename = "UdpSourceApp"
*.adaptiveCruiseControlECU.app[1].display-name = "brake command"
*.adaptiveCruiseControlECU.app[1].io.destPort = 1004
*.adaptiveCruiseControlECU.app[1].source.productionInterval = exponential(1ms) # 1000Hz 
#*.client.app[0].source.productionInterval = exponential(200us)
*.adaptiveCruiseControlECU.app[1].source.packetLength = 128B - 64B

# APP 3 SERVER
*.adaptiveCruiseControlECU.app[2].typename = "UdpSinkApp"
*.adaptiveCruiseControlECU.app[2].io.localPort = 1002

# APP 4 SERVER
*.adaptiveCruiseControlECU.app[3].typename = "UdpSinkApp"
*.adaptiveCruiseControlECU.app[3].io.localPort = 1003

# enable outgoing streams
*.adaptiveCruiseControlECU.hasOutgoingStreams = true

# client stream identification
*.adaptiveCruiseControlECU.bridging.streamIdentifier.identifier.mapping = [{stream: "speed/torque command", packetFilter: expr(udp.destPort == 1000)},
                                                         {stream: "brake command", packetFilter: expr(udp.destPort == 1004)}]
# client stream encoding
*.adaptiveCruiseControlECU.bridging.streamCoder.encoder.mapping = [{stream: "speed/torque command", pcp: 7},
                                                 {stream: "brake command", pcp: 7}]

# -------------------------------------------------------------------------------

# Brake applications

*.brakeECU.numApps = 1

# APP 1 SERVER

*.brakeECU.app[0].typename = "UdpSinkApp"
*.brakeECU.app[0].io.localPort = 1004

# -------------------------------------------------------------------------------

# Infotainment applications

*.infotainmentECU.numApps = 2

# APP 1 SERVER
*.infotainmentECU.app[0].typename = "UdpSinkApp"
*.infotainmentECU.app[0].io.localPort = 1005

# APP 2 SERVER

*.infotainmentECU.app[1].typename = "UdpSinkApp"
*.infotainmentECU.app[1].io.localPort = 1006

# -------------------------------------------------------------------------------

# Radar applications

*.radarDistanceECU.numApps = 1

# APP 1 CLIENT
*.radarDistanceECU.app[0].typename = "UdpSourceApp"
*.radarDistanceECU.app[0].display-name = "radar/distance data"
*.radarDistanceECU.app[0].io.destPort = 1002
*.radarDistanceECU.app[0].source.productionInterval = exponential(10ms) # 1000Hz 
#*.client.app[0].source.productionInterval = exponential(200us)
*.radarDistanceECU.app[0].source.packetLength = 256B - 256B

# enable outgoing streams
*.radarDistanceECU.hasOutgoingStreams = true

# client stream identification
*.radarDistanceECU.bridging.streamIdentifier.identifier.mapping = [{stream: "radar/distance data", packetFilter: expr(udp.destPort == 1002)}]
# client stream encoding
*.radarDistanceECU.bridging.streamCoder.encoder.mapping = [{stream: "radar/distance data", pcp: 5}]

# -------------------------------------------------------------------------------

# Lane Detection applications

*.laneDetectionECU.numApps = 1

# APP 1 CLIENT
*.laneDetectionECU.app[0].typename = "UdpSourceApp"
*.laneDetectionECU.app[0].display-name = "lane/distance data"
*.laneDetectionECU.app[0].io.destPort = 1003
*.laneDetectionECU.app[0].source.productionInterval = exponential(10ms) # 1000Hz 
#*.client.app[0].source.productionInterval = exponential(200us)
*.laneDetectionECU.app[0].source.packetLength = 256B - 256B

# enable outgoing streams
*.laneDetectionECU.hasOutgoingStreams = true

# client stream identification
*.laneDetectionECU.bridging.streamIdentifier.identifier.mapping = [{stream: "lane/distance data", packetFilter: expr(udp.destPort == 1003)}]
# client stream encoding
*.laneDetectionECU.bridging.streamCoder.encoder.mapping = [{stream: "lane/distance data", pcp: 5}]

# -------------------------------------------------------------------------------

# USB Media applications

*.usbMediaECU.numApps = 1

# APP 1 CLIENT
*.usbMediaECU.app[0].typename = "UdpSourceApp"
*.usbMediaECU.app[0].display-name = "download data"
*.usbMediaECU.app[0].io.destPort = 1005
*.usbMediaECU.app[0].source.productionInterval = exponential(100ms) # TODO: Change this period to a Poisson  
#*.client.app[0].source.productionInterval = exponential(200us)
*.usbMediaECU.app[0].source.packetLength = 1500B - 1000B

# enable outgoing streams
*.usbMediaECU.hasOutgoingStreams = true

# client stream identification
*.usbMediaECU.bridging.streamIdentifier.identifier.mapping = [{stream: "download data", packetFilter: expr(udp.destPort == 1005)}]
# client stream encoding
*.usbMediaECU.bridging.streamCoder.encoder.mapping = [{stream: "download data", pcp: 1}]

# -------------------------------------------------------------------------------

# Tire Pressure applications

*.tirePressureMonitoringECU.numApps = 1

# APP 1 CLIENT
*.tirePressureMonitoringECU.app[0].typename = "UdpSourceApp"
*.tirePressureMonitoringECU.app[0].display-name = "tire pressure data"
*.tirePressureMonitoringECU.app[0].io.destPort = 1006
*.tirePressureMonitoringECU.app[0].source.productionInterval = exponential(10ms) # TODO: Change this period to a Poisson  
#*.client.app[0].source.productionInterval = exponential(200us)
*.tirePressureMonitoringECU.app[0].source.packetLength = 256B - 256B

# enable outgoing streams
*.tirePressureMonitoringECU.hasOutgoingStreams = true

# client stream identification
*.tirePressureMonitoringECU.bridging.streamIdentifier.identifier.mapping = [{stream: "tire pressure data", packetFilter: expr(udp.destPort == 1006)}]
# client stream encoding
*.tirePressureMonitoringECU.bridging.streamCoder.encoder.mapping = [{stream: "tire pressure data", pcp: 5}]

# -------------------------------------------------------------------------------

# SWITCH CONFIGURATIONS

# SWITCH 1

# enable egress traffic shaping
*.tsnSwitch.hasEgressTrafficShaping = true

# disable forwarding IEEE 802.1Q C-Tag
*.tsnSwitch.bridging.directionReverser.reverser.excludeEncapsulationProtocols = ["ieee8021qctag"]


# time-aware traffic shaping
*.tsnSwitch.eth[*].macLayer.queue.numTrafficClasses = 8

*.tsnSwitch.eth[*].macLayer.queue.*[7].display-name = "critical-priority"
*.tsnSwitch.eth[*].macLayer.queue.transmissionGate[7].offset = 0ms
*.tsnSwitch.eth[*].macLayer.queue.transmissionGate[7].durations = [6ms, 4ms] # period is 10 [open, close]

*.tsnSwitch.eth[*].macLayer.queue.*[5].display-name = "medium-priority"
*.tsnSwitch.eth[*].macLayer.queue.transmissionGate[5].offset = 6ms
*.tsnSwitch.eth[*].macLayer.queue.transmissionGate[5].durations = [4ms, 6ms] # [open, close]

*.tsnSwitch.eth[*].macLayer.queue.*[1].display-name = "best-effort-priority"
*.tsnSwitch.eth[*].macLayer.queue.transmissionGate[1].offset = 10ms
*.tsnSwitch.eth[*].macLayer.queue.transmissionGate[1].durations = [2ms, 8ms] # [open, close]

# -------------------------------------------------------------------------------

# SWITCH 2

# enable egress traffic shaping
*.tsnSwitch1.hasEgressTrafficShaping = true

# disable forwarding IEEE 802.1Q C-Tag
*.tsnSwitch1.bridging.directionReverser.reverser.excludeEncapsulationProtocols = ["ieee8021qctag"]


# time-aware traffic shaping
*.tsnSwitch1.eth[*].macLayer.queue.numTrafficClasses = 8

*.tsnSwitch1.eth[*].macLayer.queue.*[7].display-name = "critical-priority"
*.tsnSwitch1.eth[*].macLayer.queue.transmissionGate[7].offset = 0ms
*.tsnSwitch1.eth[*].macLayer.queue.transmissionGate[7].durations = [6ms, 4ms] # period is 10 [open, close]

*.tsnSwitch1.eth[*].macLayer.queue.*[5].display-name = "medium-priority"
*.tsnSwitch1.eth[*].macLayer.queue.transmissionGate[5].offset = 6ms
*.tsnSwitch1.eth[*].macLayer.queue.transmissionGate[5].durations = [4ms, 6ms] # [open, close]

*.tsnSwitch1.eth[*].macLayer.queue.*[1].display-name = "best-effort-priority"
*.tsnSwitch1.eth[*].macLayer.queue.transmissionGate[1].offset = 10ms
*.tsnSwitch1.eth[*].macLayer.queue.transmissionGate[1].durations = [2ms, 8ms] # [open, close]

# -------------------------------------------------------------------------------

# SWITCH 3

# enable egress traffic shaping
*.tsnSwitch2.hasEgressTrafficShaping = true

# disable forwarding IEEE 802.1Q C-Tag
*.tsnSwitch2.bridging.directionReverser.reverser.excludeEncapsulationProtocols = ["ieee8021qctag"]


# time-aware traffic shaping
*.tsnSwitch2.eth[*].macLayer.queue.numTrafficClasses = 8

*.tsnSwitch2.eth[*].macLayer.queue.*[7].display-name = "critical-priority"
*.tsnSwitch2.eth[*].macLayer.queue.transmissionGate[7].offset = 0ms
*.tsnSwitch2.eth[*].macLayer.queue.transmissionGate[7].durations = [6ms, 4ms] # period is 10 [open, close]

*.tsnSwitch2.eth[*].macLayer.queue.*[5].display-name = "medium-priority"
*.tsnSwitch2.eth[*].macLayer.queue.transmissionGate[5].offset = 6ms
*.tsnSwitch2.eth[*].macLayer.queue.transmissionGate[5].durations = [4ms, 6ms] # [open, close]

*.tsnSwitch2.eth[*].macLayer.queue.*[1].display-name = "best-effort-priority"
*.tsnSwitch2.eth[*].macLayer.queue.transmissionGate[1].offset = 10ms
*.tsnSwitch2.eth[*].macLayer.queue.transmissionGate[1].durations = [2ms, 8ms] # [open, close]


